@using System.Linq.Expressions
@using Crocodev.Common
@using Spreadbot.App.Web
@using Spreadbot.Core.Channel.Ebay.Mip.Configuration
@using Spreadbot.Sdk.Common
@model DemoshopModel


@functions {

    private static string TaskClass(TaskStatus statusCode)
    {
        return "sb-task sb-task-{0}".TryFormat(statusCode.ToString().ToLower());
    }

}

@{
    // ===================================================================================== []
    // !>> View | Demoshop | Index
    ViewBag.Title = "Demo Shop";
    Layout = "~/Views/Shared/Layouts/Default.cshtml";
}

@helper ItemEditForm()
{
    using (Html.BeginForm("UpdateItem", "Demoshop", FormMethod.Post))
    {
        <fieldset class="sb-table">
            @FormEditor(m => DemoshopModel.Item.Sku)
            @FormEditor(m => DemoshopModel.Item.Title, "sb-width-500px")
            @FormEditor(m => DemoshopModel.Item.Price)
            @FormEditor(m => DemoshopModel.Item.Quantity)
        </fieldset>
        <input type="submit" value="Update"/>
    }
}

@helper FormEditor(Expression<Func<DemoshopModel, string>> expression, string @class = "sb-width-200px")
{
    var label = Html.LabelFor(expression);
    var textBox = Html.TextBoxFor(expression, new {@class});

    @FormView.Editor(label, textBox)
}


@helper FormEditor(Expression<Func<DemoshopModel, decimal>> expression, string @class = "sb-width-100px")
{
    var label = Html.LabelFor(expression);
    var textBox = Html.TextBoxFor(expression, new {@class});

    @FormView.Editor(label, textBox)
}

@helper ShowTasks(IEnumerable<ITask> tasks)
{
    var enumerable = tasks as ITask[] ?? tasks.ToArray();
    if (enumerable.Count() != 0)
    {
        <ul>
            @foreach (var task in enumerable)
            {
                <li class="@TaskClass(task.StatusCode)">@task</li>
                @ShowTasks(task.SubTasks)
            }
        </ul>
    }
}


@*
    // ===================================================================================== []
*@

<style>
    
    .sb-task{margin: 2px; padding: 2px;}
     .sb-task-unknown { background:  #bfbfbf; color: #000000 }

    .sb-task-todo { background: #deeafc; color: #393ba7;}

    .sb-task-inprocess { background:  #ffe970; color: #513e00;}

    .sb-task-fail { background:  red; color: yellow;}

    .sb-task-success { background: #a9e99c; color: #005204;}
</style>

<div>

    <p>Edit your Item, then publish it on eBay, check the publishing process and view the result.</p>

    <div>
        <h2>
            One-item Store
        </h2>
        @ItemEditForm()
    </div>

    <div>
        <h2>
            Store/channel Tasks
        </h2>
        @ShowTasks(DemoshopModel.StoreTasks)
        <ul>
            <li>
                @Html.ActionLink("Add task:", "AddTask") @string.Format("Publish [{0}] on eBay", DemoshopModel.Item)
            </li>
            <li>
                @Html.ActionLink("Save tasks", "SaveTasks")
            </li>
            <li>
                @Html.ActionLink("Restore tasks", "RestoreTasks")
            </li>
        </ul>
    </div>

    <div>
        <h2>
            Spreadbot Dispatcher
        </h2>
        <ul>
            <li>
                @Html.ActionLink(
                    "Run Channel Tasks ({0})"
                        .SafeFormat(DemoshopModel.ChannelTasksTodo.Count()),
                    "RunChannelTasks")
            </li>
            <li>
                @Html.ActionLink(
                    "Proceed Channel Tasks ({0})"
                        .SafeFormat(DemoshopModel.ChannelTasksInprocess.Count()),
                    "ProceedChannelTasks")
            </li>
            <li>
                [@MipSecurityConfig.Instance.MipSecretData.UserName@("@" + MipPublicConfig.Instance.MipConnection.HostName)]
            </li>
            <li>
                [<a href="http://www.ebay.com/itm/321693290987">http://www.ebay.com/itm/321693290987</a>]
            </li>
        </ul>
    </div>


</div>