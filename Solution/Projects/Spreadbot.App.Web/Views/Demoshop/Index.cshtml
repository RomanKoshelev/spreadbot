@using System.Linq.Expressions
@using Crocodev.Common
@using Spreadbot.App.Web
@using Spreadbot.Core.Channel.Ebay.Mip.Configuration
@using Spreadbot.Core.Common
@using Spreadbot.Sdk.Common
@model DemoshopModel

@{
    // ===================================================================================== []
    // >> View | Demoshop | Index
    ViewBag.Title = "Demo Shop";
    Layout = "~/Views/Shared/Layouts/Default.cshtml";
}

@helper ItemEditForm()
{
    using (Html.BeginForm("UpdateItem", "Demoshop", FormMethod.Post))
    {
        <fieldset class="sb-table">
            @FormEditor(m => m.Item.Sku)
            @FormEditor(m => m.Item.Title, "sb-width-500px")
            @FormEditor(m => m.Item.Price)
            @FormEditor(m => m.Item.Quantity)
        </fieldset>
        <input type="submit" value="Update"/>
    }
}

@helper FormEditor(Expression<Func<DemoshopModel, string>> expression, string @class = "sb-width-200px")
{
    var label = Html.LabelFor(expression);
    var textBox = Html.TextBoxFor(expression, new {@class});

    @FormView.Editor(label, textBox)
}


@helper FormEditor(Expression<Func<DemoshopModel, decimal>> expression, string @class = "sb-width-100px")
{
    var label = Html.LabelFor(expression);
    var textBox = Html.TextBoxFor(expression, new {@class});

    @FormView.Editor(label, textBox)
}

@helper ShowTasks(IEnumerable<ITask> tasks)
{
    var enumerable = tasks as ITask[] ?? tasks.ToArray();
    if (enumerable.Count() != 0)
    {
        <ul>
            @foreach (var task in enumerable)
            {
                <li>@task</li>
                @ShowTasks(task.SubTasks)
            }
        </ul>
    }
}


@*
    // ===================================================================================== []
*@

<div>

    <p>Edit your Item, then publish it on eBay, check the publishing process and view the result.</p>

    <div>
        <h2>
            One-item Store
        </h2>
        @ItemEditForm()
    </div>

    <div>
        <h2>
            Store and Channel Tasks
        </h2>
        @ShowTasks(Model.StoreTasks)
        @Html.ActionLink("Add task:", "AddTask") @string.Format("Publish [{0}] on eBay", Model.Item)
    </div>

    <div>
        <h2>
            eBay Publisher
        </h2>

        <ul>
            <li>
                @Html.ActionLink(
                    "Run Channel Tasks ({0})"
                        .SafeFormat(Model.ChannelTasks.Count(t => t.StatusCode == TaskStatus.Todo)),
                    "RunChannelTasks")
            </li>
            <li>
                @*
                // Code: ** View : UpdateChannelTasks
                *@
                @Html.ActionLink(
                    "Upadte Task Statuses ({0})"
                        .SafeFormat(Model.ChannelTasks.Count(t => t.StatusCode == TaskStatus.Inprocess)),
                    "UpdateChannelTasks")
            </li>
            <li>
                View publishing result for request [yyy]
            </li>
        </ul>


    </div>

    [@MipSecurityConfig.Instance.MipSecretData.UserName@("@" + MipPublicConfig.Instance.MipConnection.HostName)]<br>
    [<a href="http://www.ebay.com/itm/321693290987">http://www.ebay.com/itm/321693290987</a>]

</div>